from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import requests
from telegram.ext import MessageHandler, filters
from datetime import datetime
from bs4 import BeautifulSoup
import sqlite3
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
conn = sqlite3.connect('notes.db')
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS notes (user_id INTEGER, text TEXT)')
cursor.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER, text TEXT)')
cursor.execute('CREATE TABLE IF NOT EXISTS product (id_product INTEGER, text TEXT, price REAL)')
cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
tables = cursor.fetchall()
print(tables)
conn.commit()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def cbr_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = "https://cbr.ru/currency_base/daily/"
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–ª–∞—Å—Å—É
        table = soup.find('table', class_='data')

        usd_rate = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        eur_rate = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        if table:
            # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            for row in table.find_all('tr')[1:]:
                cols = row.find_all('td')
                if len(cols) >= 5:
                    currency_code = cols[1].text.strip()  # –ë—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥

                    if currency_code == 'USD':
                        usd_rate = cols[4].text.strip()  # –ö—É—Ä—Å
                    elif currency_code == 'EUR':
                        eur_rate = cols[4].text.strip()
        symbol = "BTCUSDT"
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"

        response = requests.get(url)
        data = response.json()
        price = float(data['price'])  # ‚Üê –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –í –ß–ò–°–õ–û
        rounded_price = round(price, 2)  # ‚Üê –û–ö–†–£–ì–õ–Ø–ï–ú

        await update.message.reply_text(
            f"üè¶ –ö—É—Ä—Å –¶–ë –†–§:\n"
            f"üá∫üá∏ USD: {usd_rate} —Ä—É–±.\n"
            f"üá™üá∫ EUR: {eur_rate} —Ä—É–±.\n"
            f"üíµ BTC: {rounded_price} –¥–æ–ª.\n"
        )

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if context.args:
        city = context.args[0]
        url = f"https://api.weatherapi.com/v1/current.json?key=6465d9942ba74529b9a135645250509&q={city}&lang=ru"
        response = requests.get(url)
        data = response.json()
        temperature = data['current']['temp_c']
        description = data['current']['condition']['text']
        await update.message.reply_text(f"–í {city} {temperature}¬∞C, {description}")
    else:
        await update.message.reply_text(f"–ù–∞–ø–∏—à–∏ /weather –∏ –≥–æ—Ä–æ–¥")

async def timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_date = datetime(2025, 11, 6)  # –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
    current_date = datetime.now()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    time_left = target_date - current_date  # –†–∞–∑–Ω–∏—Ü–∞

    days = time_left.days
    hours = time_left.seconds // 3600
    minutes = (time_left.seconds % 3600) // 60
    seconds = time_left.seconds % 60

    await update.message.reply_text(f"–î–æ –¥–µ–º–±–µ–ª—è: {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥")

async def binance_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = "BTCUSDT"
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"

    response = requests.get(url)
    data = response.json()
    price = float(data['price'])  # ‚Üê –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –í –ß–ò–°–õ–û
    rounded_price = round(price, 2)  # ‚Üê –û–ö–†–£–ì–õ–Ø–ï–ú

    await update.message.reply_text(f"BTC: {rounded_price}$")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    user_id = update.effective_user.id

    if "–ø—Ä–∏–≤–µ—Ç" in user_text:
        await update.message.reply_text("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üòä")
    elif "–∫–∞–∫ –¥–µ–ª–∞" in user_text:
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?")
    elif "–¥–∏–º–∞" in user_text or "–¥–∏–º–µ" in user_text or "–¥–∏–º–∞—Å–∏–∫" in user_text:
        await update.message.reply_text("–û–æ–æ–æ, –î–∏–º–∞—Å–∏–∫, —Å–ª—ã—à–∞–ª –æ –Ω–µ–º, –∫–ª–∞—Å—Å–Ω—ã–π –ø–∞—Ä–µ–Ω—å")
    elif "–¥–∞–≤–∞–π –∫—Ä–∞–±–∞" in user_text:
        await update.message.reply_text("–ù–∞ü¶Ä")
    elif "—Ç—ã –ø–∏–¥–æ—Ä?" in user_text:
        await update.message.reply_text("–¥–∞!")
    elif "—Ö—É–π–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–µ" in user_text or "—Ö–µ—Ä–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω" in user_text:
        await update.message.reply_text("–º–æ–π –ø–∞—Ä–µ–Ω—å –ª—é–±–∏—Ç –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∑–∞ —á—Ç–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è!")
    elif "–∞ —á–µ —Ç–∞–∫ –≥–æ—Ä–¥–æ?" in user_text:
        await update.message.reply_text("–Ø –≥–æ—Ä–¥—ã–π –ø–∏–¥–æ—Ä–∞—Å–∏–∫!")
    elif "—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏" in user_text:
        if '—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏, —á—Ç–æ' in user_text:
            note_text = user_text.split("—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏, —á—Ç–æ", 1)[1].strip()
        elif '—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏ —á—Ç–æ' in user_text:
            note_text = user_text.split("—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏ —á—Ç–æ", 1)[1].strip()
        else:
            note_text = user_text.split("—Ä—É—Å–∏–∫ –∑–∞–ø–∏—à–∏", 1)[1].strip()

        cursor.execute('INSERT INTO notes VALUES (?, ?)', (user_id, note_text))
        conn.commit()
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–ª!")

    elif "–ø–æ–∫–∞–∂–∏ –∫–∞ –µ–º—É" in user_text:
        await update.message.reply_text("–≤–¥–æ—Ö - –≤—ã–¥–æ—Ö")

    elif "—Ä—É—Å–∏–∫ —É–¥–∞–ª–∏" in user_text:
        if "—Ä—É—Å–∏–∫ —É–¥–∞–ª–∏ –≤—Å–µ" in user_text:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('DELETE FROM notes WHERE user_id = ?', (user_id,))
            conn.commit()
            await update.message.reply_text("üóëÔ∏è –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
            note_to_delete = user_text.split("—Ä—É—Å–∏–∫ —É–¥–∞–ª–∏", 1)[1].strip()
            cursor.execute('DELETE FROM notes WHERE user_id = ? AND text = ?', (user_id, note_to_delete))
            conn.commit()

            if cursor.rowcount > 0:
                await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å '{note_to_delete}' —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    elif "—Ä—É—Å–∏–∫ –ø–æ–∫–∞–∂–∏" in user_text:
        # –î–æ—Å—Ç–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT text FROM notes WHERE user_id = ?', (user_id,))
        notes = cursor.fetchall()

        if notes:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            notes_list = "\n".join([f"‚Ä¢ {note[0]}" for note in notes])
            await update.message.reply_text(f"üìù –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{notes_list}")
        else:
            await update.message.reply_text("üìù –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!")
    else:
        return

async def wb_parser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    print(query)

    params = {
        'query': query,
        'appType': '1',
        'curr': 'rub',
        'dest': '-1123297',
        'resultset': 'catalog',
        'spp': '30',
        'lang': 'ru',
        'page': '1',
    }

    try:
        response = requests.get('https://recom.wb.ru/personal/ru/common/v8/search', params=params)

        # –ü–ï–†–í–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return

        data = response.json()
        products = data.get('products', [])

        # –í–¢–û–†–û–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if query.lower() == '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
            await update.message.reply_text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}')
            return

        # –¢–†–ï–¢–¨–ï: –≤—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã
        if products:
              # –ë–µ—Ä–µ–º 1 —Ç–æ–≤–∞—Ä
                product = products[1]
                name = product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                brand = product.get('brand', '–ë—Ä–µ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
                price = product.get('sizes', [{}])[0].get('price', {}).get('product', 0) / 100
                rating = product.get('reviewRating', 0)
                feedbacks = product.get('feedbacks', 0)

                await update.message.reply_text(
                    f"üõçÔ∏è {brand} - {name}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                    f"üìä –û—Ç–∑—ã–≤—ã: {feedbacks}\n"
                    f"üîó https://www.wildberries.ru/catalog/{product['id']}/detail.aspx"
                )
        else:
            await update.message.reply_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def get_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')  # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        driver = webdriver.Chrome(options=options)

        driver.get("https://gumrf.ru/?ysclid=mff5t7hfbq177393887")

        # –ñ–¥–µ–º –ø–æ–∫–∞ JavaScript –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è
        element = WebDriverWait(driver, 2).until(
            EC.presence_of_element_located((By.ID, "GetWeek"))
        )

        week_text = element.text.lower()  # "–ß–∏—Å–ª–∏—Ç–µ–ª—å (–Ω–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è)" –∏–ª–∏ "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å (—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è)"

        driver.quit()

        await update.message.reply_text(f"üìÖ {week_text}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def place_an_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞:")


TOKEN = "8226370714:AAHyhzM0QuoYOPihLn_npm4KUc8BRSc7ItY"

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("weather", weather))
app.add_handler(CommandHandler("data", timer))
app.add_handler(CommandHandler("wb", wb_parser))
app.add_handler(CommandHandler("bin", binance_price))
app.add_handler(CommandHandler("cource", cbr_currency))
app.add_handler(CommandHandler("get_week", get_week))
app.add_handler(CommandHandler("place_an_order", place_an_order))


app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()